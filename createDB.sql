DROP TABLE IF EXISTS Users CASCADE;
CREATE TABLE Users(
  ID SERIAL UNIQUE PRIMARY KEY,
  FirstName VARCHAR NOT NULL,
  LastName VARCHAR NOT NULL,
  Email VARCHAR UNIQUE NOT NULL,
  CreationTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  Active BOOLEAN DEFAULT TRUE
);

DROP TABLE IF EXISTS Auth CASCADE;
CREATE TABLE AUTH(
	UserID INTEGER NOT NULL REFERENCES Users(ID) ON DELETE CASCADE,
	HPassword VARCHAR NOT NULL,
	CreationTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS Lists CASCADE;
CREATE TABLE Lists(
	ID SERIAL UNIQUE PRIMARY KEY,
	Name VARCHAR NOT NULL,
	Type INTEGER NOT NULL,
	Creator INTEGER REFERENCES Users(ID) ON DELETE CASCADE,
	CreationTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS ListItems CASCADE;
CREATE TABLE ListItems(
	ID SERIAL UNIQUE PRIMARY KEY,
	ListID INTEGER NOT NULL REFERENCES Lists(ID) ON DELETE CASCADE,
	CreationTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	Completed BOOLEAN DEFAULT FALSE,
	Name VARCHAR NOT NULL,
	Price REAL,
	Recipient VARCHAR,
	Trashed BOOLEAN DEFAULT FALSE,
	Creator INTEGER NOT NULL REFERENCES Users(ID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS UserLists CASCADE;
CREATE TABLE UserLists(
	ID SERIAL UNIQUE PRIMARY KEY,
	UserID INTEGER NOT NULL REFERENCES Users(ID) ON DELETE CASCADE,
	ListID INTEGER NOT NULL REFERENCES Lists(ID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS PendingUserLists CASCADE;
CREATE TABLE PendingUserLists(
	ID SERIAL UNIQUE PRIMARY KEY,
	UserID INTEGER NOT NULL REFERENCES Users(ID) ON DELETE CASCADE,
	ListID INTEGER NOT NULL REFERENCES Lists(ID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS RemovedUserLists CASCADE;
CREATE TABLE RemovedUserLists(
	ID SERIAL UNIQUE PRIMARY KEY,
	UserID INTEGER NOT NULL REFERENCES Users(ID) ON DELETE CASCADE,
	ListID INTEGER NOT NULL REFERENCES Lists(ID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS Notis CASCADE;
CREATE TABLE Notis(
	ID SERIAL UNIQUE PRIMARY KEY,
	UserID INTEGER NOT NULL REFERENCES Users(ID) ON DELETE CASCADE,
	PendingUserListsID INTEGER REFERENCES PendingUserLists(ID) ON DELETE CASCADE,
	ApprovedUserListID INTEGER REFERENCES UserLists(ID) ON DELETE CASCADE,
	RemovedUserListsID INTEGER REFERENCES RemovedUserLists(ID) ON DELETE CASCADE,
	CreationTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	Read BOOLEAN DEFAULT FALSE
);

-- Trigger to add notification to user when they have been invited to a list
DROP FUNCTION IF EXISTS CreatePendingNoti();
CREATE FUNCTION CreatePendingNoti()
RETURNS trigger AS '
BEGIN
 INSERT INTO Notis (UserID, PendingUserListsID)
 VALUES (NEW.UserID, NEW.ID);
 RETURN NEW;
END' LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS PendingUserNotificationTrigger ON PendingUserLists;
CREATE TRIGGER PendingUserNotificationTrigger 
AFTER INSERT ON PendingUserLists
FOR EACH ROW
EXECUTE PROCEDURE CreatePendingNoti();

-- Trigger to add noti all other users in a list when a user approves being added
DROP FUNCTION IF EXISTS ApprovedNoti();
CREATE FUNCTION ApprovedNoti()
RETURNS trigger AS '
BEGIN
 INSERT INTO Notis (UserID, approveduserlistid)
 SELECT UserID, NEW.ID FROM UserLists, Lists
 WHERE UserLists.ListID=Lists.ID
 AND UserLists.ListID=New.ListID
 AND NEW.UserID<>Lists.Creator
 AND NEW.UserID<>UserLists.UserID;

 RETURN NEW;
END' LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS ApprovedUserListsTrigger ON UserLists;
CREATE TRIGGER PendingUserNotificationTrigger 
AFTER INSERT ON UserLists
FOR EACH ROW
EXECUTE PROCEDURE ApprovedNoti();

-- Trigger to everyone in list when a user is removed
DROP FUNCTION IF EXISTS RemovedNoti();
CREATE FUNCTION RemovedNoti()
RETURNS trigger AS '
BEGIN
 INSERT INTO Notis (UserID, RemovedUserListsID)
 SELECT UserID, NEW.ID FROM UserLists
 WHERE UserLists.ListID=New.ListID
 AND NEW.UserID<>UserLists.UserID;

 RETURN NEW;
END' LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS RemovedUserListsTrigger ON RemovedUserLists;
CREATE TRIGGER RemovedUserListsTrigger
AFTER INSERT ON RemovedUserLists
FOR EACH ROW
EXECUTE PROCEDURE RemovedNoti();


